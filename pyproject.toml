[tool.poetry]
name = "definite-target-iceberg"
version = "0.0.1"
description = "`target-iceberg` is a Singer target for iceberg, built with the Meltano Singer SDK."
readme = "README.md"
authors = ["Kai Rikhye <kai@definite.app>"]
keywords = [
    "ELT",
    "Iceberg",
]
classifiers = [
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
license = "Apache-2.0"
packages = [
    { include = "target_iceberg" },
]

[tool.poetry.dependencies]
python = "^3.9"
singer-sdk = { version="~=0.39.1", extras = ["faker"] }
fs-s3fs = { version = "~=1.1.1", optional = true }
requests = "~=2.32.0"
pyiceberg = { version = "^0.6.1", extras = ["gcsfs", "sql-postgres", "pyarrow"] }
pandas = "^2.2.2"
numpy = "<2"

[tool.poetry.dev-dependencies]
pytest = ">=7.4.0"
singer-sdk = { version="~=0.39.1", extras = ["testing"] }

[tool.poetry.extras]
s3 = ["fs-s3fs"]

[tool.ruff]
src = ["target_iceberg"]
target-version = "py38"

[tool.ruff.lint]
ignore = [
    "ANN101",  # missing-type-self
    "ANN102",  # missing-type-cls
    "COM812",  # missing-trailing-comma
    "ISC001",  # single-line-implicit-string-concatenation
]
select = ["ALL"]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.isort]
known-first-party = ["target_iceberg"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[build-system]
requires = ["poetry-core==1.9.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
# CLI declaration
target-iceberg = 'target_iceberg.target:TargetIceberg.cli'
